# scripts/maintenance/nettoyage_mlflow.py
import argparse
import mlflow
from mlflow.tracking import MlflowClient

def keep_topk(experiment_name: str, metric_key: str, k: int, ascending: bool, dry_run: bool):
    """Supprime tous les runs sauf les K meilleurs d'une exp√©rience MLflow donn√©e."""
    mlflow.set_tracking_uri("file:./mlruns")
    client = MlflowClient()
    exp = client.get_experiment_by_name(experiment_name)
    if not exp:
        print(f"[‚ö†Ô∏è] Exp√©rience '{experiment_name}' introuvable.")
        return

    # R√©cup√©ration de tous les runs (on √©vite les filtres non support√©s par certains backends)
    try:
        runs = client.search_runs(
            experiment_ids=[exp.experiment_id],
            filter_string="attributes.status = 'FINISHED'",
            max_results=50000,
        )
    except Exception as e:
        print(f"[‚ÑπÔ∏è] search_runs avec filtre 'status=FINISHED' a √©chou√© ({e}). "
              "On r√©cup√®re tous les runs et on filtrera c√¥t√© Python.")
        runs = client.search_runs(
            experiment_ids=[exp.experiment_id],
            max_results=50000,
        )
        # Filtre c√¥t√© Python : ne garder que les FINISHED
        runs = [r for r in runs if getattr(r.info, "status", None) == "FINISHED"]
    # Certains backends ne permettent pas de filtrer par lifecycle_stage dans la requ√™te.
    # On filtre c√¥t√© Python pour ne garder que les runs actifs (si attribut pr√©sent).
    runs = [r for r in runs if getattr(r.info, "lifecycle_stage", "active") == "active"]

    # Sanity log
    print(f"[{experiment_name}] runs r√©cup√©r√©s apr√®s filtrage: {len(runs)}")

    # Tri et s√©lection
    runs_sorted = sorted(
        runs,
        key=lambda r: r.data.metrics.get(metric_key, float('-inf' if not ascending else 'inf')),
        reverse=not ascending
    )
    keep = runs_sorted[:k]
    drop = runs_sorted[k:]

    if len(runs_sorted) == 0:
        print(f"[{experiment_name}] Aucun run trouv√© (status=FINISHED).")
        return

    print(f"[{experiment_name}] total={len(runs_sorted)} | garder={len(keep)} | supprimer={len(drop)} (crit√®re: {metric_key})")
    if dry_run:
        print("üü° Mode simulation activ√© (aucune suppression).")
        return

    # Suppression
    for r in drop:
        client.delete_run(r.info.run_id)
    print(f"[{experiment_name}] ‚úÖ Suppression termin√©e ({len(drop)} runs supprim√©s).")

def main():
    ap = argparse.ArgumentParser(description="Nettoyage s√©lectif des runs MLflow")
    ap.add_argument("--experiment", required=True, help="Nom exact de l'exp√©rience MLflow")
    ap.add_argument("--metric", required=True, help="Nom de la m√©trique de tri (ex: val_f1, f1_macro)")
    ap.add_argument("--top_k", type=int, default=3, help="Nombre de meilleurs runs √† conserver")
    ap.add_argument("--ascending", action="store_true", help="Tri croissant (par d√©faut d√©croissant)")
    ap.add_argument("--dry_run", action="store_true", help="Simulation sans suppression r√©elle")
    args = ap.parse_args()
    keep_topk(args.experiment, args.metric, args.top_k, args.ascending, args.dry_run)

if __name__ == "__main__":
    main()